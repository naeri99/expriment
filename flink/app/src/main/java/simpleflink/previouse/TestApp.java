/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package simpleflink;
import simpleflink.dto.Person;
import simpleflink.dto.IdKeySelectorAddress;
import simpleflink.dto.IdKeySelectorTransaction;
import org.apache.flink.api.java.ExecutionEnvironment;
import org.apache.flink.api.java.DataSet;
import static org.assertj.core.api.Assertions.*;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.common.operators.Order;

import java.util.*;


public class TestApp {

    public static void main(String[] args) throws Exception {
        ExecutionEnvironment env= ExecutionEnvironment.getExecutionEnvironment();

        // DataSet<Person> personDataSource = env.fromCollection(
        // Arrays.asList(
        //     new Person(23, "Tom"),
        //     new Person(75, "Michael")));

        // List<Integer> ages = personDataSource
        //     .map(p -> p.getAge())
        //     .collect();
          
        // assertThat(ages).hasSize(2);
        // assertThat(ages).contains(23, 75);

        Tuple3<Integer, String, String> address= new Tuple3<>(1, "5th Avenue", "London");
        DataSet<Tuple3<Integer, String, String>> addresses = env.fromElements(address);

        Tuple2<Integer, String> firstTransaction = new Tuple2<>(1, "Transaction_1");
        DataSet<Tuple2<Integer, String>> transactions = env.fromElements(firstTransaction, new Tuple2<>(12, "Transaction_2"));


        List<Tuple2<Tuple2<Integer, String>, Tuple3<Integer, String, String>>>joined = transactions.join(addresses)
        .where(new IdKeySelectorTransaction())
        .equalTo(new IdKeySelectorAddress())
        .collect();

        assertThat(joined).hasSize(1);
        assertThat(joined).contains(new Tuple2<>(firstTransaction, address));


        Tuple2<Integer, String> secondPerson = new Tuple2<>(4, "Tom");
        Tuple2<Integer, String> thirdPerson = new Tuple2<>(5, "Scott");
        Tuple2<Integer, String> fourthPerson = new Tuple2<>(200, "Michael");
        Tuple2<Integer, String> firstPerson = new Tuple2<>(1, "Jack");
        
        DataSet<Tuple2<Integer, String>> transactionsTwo = env.fromElements(fourthPerson, secondPerson, thirdPerson, firstPerson);

        
        List<Tuple2<Integer, String>> sorted = transactionsTwo
                                            .sortPartition(new IdKeySelectorTransaction(), Order.ASCENDING).collect();

        assertThat(sorted)
        .containsExactly(firstPerson, secondPerson, thirdPerson, fourthPerson);


    }
}
