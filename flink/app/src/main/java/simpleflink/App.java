/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package simpleflink;
// import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.flink.streaming.api.datastream.DataStream;
import simpleflink.dto.Person;
import simpleflink.dto.IdKeySelectorAddress;
import simpleflink.dto.IdKeySelectorTransaction;
import org.apache.flink.api.java.ExecutionEnvironment;
import org.apache.flink.api.java.DataSet;
import static org.assertj.core.api.Assertions.*;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.common.operators.Order;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;
import simpleflink.dto.WordsCapitalizer;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

import java.util.*;


public class App {

    public static void main(String[] args) throws Exception {
        String inputTopic = "flink_input";
        String outputTopic = "flink_output";
        String consumerGroup = "baeldung";
        String address = "flink_0:9092";
        StreamExecutionEnvironment environment = StreamExecutionEnvironment.getExecutionEnvironment();

        FlinkKafkaConsumer<String> flinkKafkaConsumer = createStringConsumerForTopic(inputTopic, address, consumerGroup);
        DataStream<String> stringInputStream = environment.addSource(flinkKafkaConsumer);
        flinkKafkaConsumer.setStartFromEarliest();

        // // collectedData.forEach(System.out::println);
        FlinkKafkaProducer<String> flinkKafkaProducer = createStringProducer(outputTopic, address);

        stringInputStream.map(new WordsCapitalizer()).addSink(flinkKafkaProducer);

        environment.execute("Print DataStream Elements");


    }


    public static FlinkKafkaConsumer<String> createStringConsumerForTopic(String topic, String kafkaAddress, String kafkaGroup ) {
        Properties props = new Properties();
        props.setProperty("bootstrap.servers", kafkaAddress);
        props.setProperty("group.id",kafkaGroup);
        FlinkKafkaConsumer<String> consumer = new FlinkKafkaConsumer<>(topic, new SimpleStringSchema(), props);

        return consumer;
    }


    public static FlinkKafkaProducer<String> createStringProducer(String topic, String kafkaAddress){

        return new FlinkKafkaProducer<>(kafkaAddress, topic, new SimpleStringSchema());
}
}
